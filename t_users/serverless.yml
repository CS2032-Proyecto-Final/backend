org: bibliokuna
service: api-users

custom:
  URLS:
    libraries:
      dev: https://2333ibrncl.execute-api.us-east-1.amazonaws.com/dev     
      test: https://78v835l8h4.execute-api.us-east-1.amazonaws.com/test
      prod: https://836c1esai1.execute-api.us-east-1.amazonaws.com/prod
    notifications:
      dev: https://epa4o89cfl.execute-api.us-east-1.amazonaws.com/dev
      test:
      prod:

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 30
  iam:
    role: ${env:LAB_ROLE_ARN}
  environment:
    USERS_TABLE_NAME: ${sls:stage}-t_users
    JWT_SECRET: ${env:JWT_SECRET}
    LIBRARIES_URL: ${self:custom.URLS.libraries.${sls:stage}}
    NOTIFICATIONS_URL: ${self:custom.URLS.notifications.${sls:stage}}

functions:
  RegisterUser:
    handler: RegisterUser.lambda_handler
    events:
      - http:
          path: auth/register
          method: post
          cors: true
          integration: lambda

  Login:
    handler: Login.lambda_handler
    package:
      include:
        - ./**
    events:
      - http:
          path: auth/login
          method: post
          cors: true
          integration: lambda

  ValidateToken:
    handler: ValidateToken.lambda_handler
    package:
      include:
        - ./**
    events:
      - http:
          path: tokens/validate
          method: post
          cors: true
          integration: lambda

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST